name: build
on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    runs-on: ${{ matrix.platform == 'linux/amd64' && 'ubuntu-latest' || matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' }}
    name: ${{ matrix.platform }} base-build
    outputs:
      tag: ${{ steps.envvars.outputs.tag }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Prepare env
        id: envvars
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          TAG="$(cat Dockerfile | grep "FROM" | cut -d':' -f2)-$(date +'%Y-%m-%d')"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Metadata
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Authenticate with GHCR
        id: auth
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.BUILD_TOKEN}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ghcr.io/${{ github.repository }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4.6.2
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4.3.0
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Authenticate with GHCR
        id: auth
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.BUILD_TOKEN}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.11.1

      - name: Metadata
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            latest
            ${{ steps.envvars.outputs.tag }}
          labels: |
            annotation-index.org.opencontainers.image.source=https://github.com/jimboid/biosim-jupyterhub-base
            annotation-index.org.opencontainers.image.licenses=MIT
            annotation-index.org.opencontainers.image.description=A base container image derived from jupyterhub base containers with some extra utilities installed.
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ github.repository }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ github.repository }}:${{ needs.build.outputs.tag }}

#  trigger:
#    needs: build
#    runs-on: ubuntu-24.04
#    strategy:
#      matrix:
#        repos: ["aiida-gpcr",
#                "aiida-lysozyme",
#                "basic-analysis",
#                "basic-statistics",
#                "beginners",
#                "clustering",
#                "codeentropy",
#                "docking",
#                "enhanced-sampling",
#                "equilibration",
#                "introamber",
#                "nemd",
#                "openff",
#                "pca",
#                "pdb2pqr",
#                "python",
#                "qmmm",
#                "structure-validation",
#                "ubiquitin-analysis"]
#    name: jupyterhub-${{ matrix.jupyter-base }}
#    steps:  
#      - name: Repository Dispatch Build Trigger
#        uses: peter-evans/repository-dispatch@v3.0.0
#        with:
#          token: ${{ secrets.BUILD_TOKEN }}
#          repository: jimboid/biosim-${{ matrix.repos }}-workshop
#          event-type: build    
#          client-payload: '{"tag": "${{ needs.build.outputs.tag }}"}'
